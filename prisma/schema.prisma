// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  WRITER
}

enum ArticleStatus {
  DRAFT
  PRIVATE
  PUBLIC
  DELETED
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          Role      @default(USER)
  address       Json?     @db.Json
  paymentMethod String?

  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @updatedAt
  Account   Account[]
  Session   Session[]
  Favorite  Favorite[]
  Article   Article[]
  Image     Image[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
}

model Article {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String?       @db.Uuid
  title          String
  description    String?
  content        String?
  imageUrl       String?
  language       String?       @default("sr")
  readingTime    Int?
  thumbnail      Image?        @relation(fields: [imageId], references: [id])
  seoTitle       String?
  seoDescription String?
  keywords       String[]
  status         ArticleStatus @default(DRAFT)
  slug           String        @unique
  publishedAt    DateTime      @default(now()) @db.Timestamp(6)
  createdAt      DateTime      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime      @updatedAt @db.Timestamp(6)

  categoryId String?   @db.Uuid
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  favoritedBy Favorite[]
  imageId     String?
}

model Favorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  articleId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Category {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  articles Article[]
}

model Image {
  id        String    @id @default(cuid())
  url       String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.Uuid
  createdAt DateTime  @default(now())
  Article   Article[]
}
